<?xml version="1.0" encoding="utf-8"?>
<!--

	Copyright 2011 Ruben Buniatyan. All rights reserved.
	Copyright 2008 Adobe Systems Incorporated. All rights reserved.
	
	This source is subject to the license agreement accompanying it.

-->
<!---
	The default skin class for CollapsiblePanel container.

	@see flame.controls.spark.CollapsiblePanel
-->
<s:SparkSkin xmlns:fb="http://ns.adobe.com/flashbuilder/2009" xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark" alpha.disabled="0.5" alpha.disabledWithControlBar="0.5" blendMode="normal"
    creationComplete="creationCompleteHandler(event);" minWidth="0" minHeight="0" mouseEnabled="false">
	
	<!-- host component -->
	<fx:Metadata>
		/**
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("flame.controls.spark.CollapsiblePanel")]
	</fx:Metadata>
    
	<fx:Script fb:purpose="styling">
	<![CDATA[
		import mx.core.FlexVersion;
		import mx.events.FlexEvent;

		//--------------------------------------------------------------------------
		//
		//  Fields
		//
		//--------------------------------------------------------------------------
		
		/* Define the skin elements that should not be colorized. 
		For panel, border and title background are skinned, but the content area, background, border, and title text are not. */
		static private const _exclusions:Array = [ "background", "titleDisplay", "contentGroup", "controlBarGroup", "border" ];
			
		/* exclusions before Flex 4.5 for backwards-compatibility purposes */
		static private const _exclusions_4_0:Array = [ "background", "titleDisplay", "contentGroup", "controlBarGroup" ];
		
		private var _cornerRadius:Number;
		
		//--------------------------------------------------------------------------
		//
		//  Public properties
		//
		//--------------------------------------------------------------------------
		
		/**
		 * @private
		 */
		public override function get colorizeExclusions():Array 
		{
			// Since border is styleable via borderColor, no need to allow chromeColor to affect
			// the border.  This is wrapped in a compatibility flag since this change was added  
			// in Flex 4.5
			return FlexVersion.compatibilityVersion < FlexVersion.VERSION_4_5 ? _exclusions_4_0 : _exclusions;
		}
		
		//--------------------------------------------------------------------------
		//
		//  Protected methods
		//
		//--------------------------------------------------------------------------
		
		/**
		 * @private
		 */
		protected function creationCompleteHandler(event:FlexEvent):void
		{
			topGroup.doubleClickEnabled = hostComponent.doubleClickEnabled;
		}
		
		/**
		 * @private
		 */
		protected override function initializationComplete():void
		{
		    useChromeColor = true;
			
		    super.initializationComplete();
		}
		
		/**
		 * @private
		 */
		protected override function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
		{
		    if (getStyle("borderVisible") == true)
		    {
		        border.visible = true;
		        background.left = background.top = background.right = background.bottom = 1;
		        contents.left = contents.top = contents.right = contents.bottom = 1;
		    }
		    else
		    {
		        border.visible = false;
		        background.left = background.top = background.right = background.bottom = 0;
		        contents.left = contents.top = contents.right = contents.bottom = 0;
		    }
		    
		    dropShadow.visible = getStyle("dropShadowVisible");
		    
		    var cornerRadius:Number = getStyle("cornerRadius");
		    var withControls:Boolean = currentState == "disabledWithControlBar" || currentState == "normalWithControlBar";
		    
		    if (_cornerRadius != cornerRadius)
		    {
		        _cornerRadius = cornerRadius;
		        
		        dropShadow.tlRadius = _cornerRadius;
		        dropShadow.trRadius = _cornerRadius;
		        dropShadow.blRadius = withControls ? _cornerRadius : 0;
		        dropShadow.brRadius = withControls ? _cornerRadius : 0;
		        
		        setPartCornerRadii(topMaskRect, withControls); 
		        setPartCornerRadii(border, withControls); 
		        setPartCornerRadii(background, withControls);                
		    }
		    
		    if (bottomMaskRect)
				setPartCornerRadii(bottomMaskRect, withControls); 
		    
		    borderStroke.color = getStyle("borderColor");
		    borderStroke.alpha = getStyle("borderAlpha");
		    backgroundFill.color = getStyle("backgroundColor");
		    backgroundFill.alpha = getStyle("backgroundAlpha");
		    
		    super.updateDisplayList(unscaledWidth, unscaledHeight);
		}
		
		//--------------------------------------------------------------------------
		//
		//  Private methods
		//
		//--------------------------------------------------------------------------
		
		/**
		 * @private
		 */  
		private function setPartCornerRadii(target:Rect, includeBottom:Boolean):void
		{            
		    target.topLeftRadiusX = _cornerRadius;
		    target.topRightRadiusX = _cornerRadius;
		    target.bottomLeftRadiusX = includeBottom ? _cornerRadius : 0;
		    target.bottomRightRadiusX = includeBottom ? _cornerRadius : 0;
		}
	]]>
	</fx:Script>
    
    <s:states>
		
        <s:State name="normal" />
		
        <s:State name="disabled" />
		
		<s:State name="collapsed" />
		
        <s:State name="normalWithControlBar" stateGroups="withControls" />
		
        <s:State name="disabledWithControlBar" stateGroups="withControls" />
		
    </s:states>
	
    <!-- drop shadow can't be hittable so it stays sibling of other graphics -->
    <!--- @private -->
    <s:RectangularDropShadow id="dropShadow" alpha="0.32" angle="90" blurX="20" blurY="20" bottom="0" distance="11" color="#000000"
		left="0" right="0" top="0" />
    <!-- drop shadow can't be hittable so all other graphics go in this group -->
    <s:Group bottom="0" left="0" right="0" top="0">
        <!-- top group mask -->
        <!--- @private -->
        <s:Group id="topGroupMask" bottom="1" left="1" right="1" top="1">
            <!--- @private -->
            <s:Rect id="topMaskRect" bottom="0" left="0" right="0" top="0">
				
                <s:fill>
					
                    <s:SolidColor alpha="0" />
					
                </s:fill>
				
            </s:Rect>
			
        </s:Group>
        <!-- bottom group mask -->
        <!--- @private -->
        <s:Group id="bottomGroupMask" bottom="1" includeIn="normalWithControlBar, disabledWithControlBar"
			left="1" top="1" right="1">
            <!--- @private -->
            <s:Rect id="bottomMaskRect" bottom="0" left="0" right="0" top="0">
				
                <s:fill>
					
                    <s:SolidColor alpha="0" />
					
                </s:fill>
				
            </s:Rect>
			
        </s:Group>
        <!-- layer 1: border -->
        <!--- @private -->
        <s:Rect id="border" bottom="0" left="0" right="0" top="0">
			
            <s:stroke>
                <!--- @private -->
                <s:SolidColorStroke id="borderStroke" weight="1" />
				
            </s:stroke>
			
        </s:Rect>
        <!-- layer 2: background fill -->
        <!--- Defines the appearance of the PanelSkin class's background. -->
        <s:Rect id="background" bottom="1" left="1" right="1" top="1">
			
            <s:fill>
                <!--- @private Defines the  PanelSkin class's background fill. The default color is #FFFFFF. -->
                <s:SolidColor id="backgroundFill" color="#FFFFFF" />
				
            </s:fill>
			
        </s:Rect>
        <!-- layer 3: contents -->
        <!--- Contains the vertical stack of titlebar content and controlbar. -->
        <s:Group id="contents" bottom="1" left="1" right="1" top="1">
			
            <s:layout>
				
                <s:VerticalLayout gap="0" horizontalAlign="justify" />
				
            </s:layout>
            <!--- @private -->
            <s:Group id="topGroup" doubleClick="hostComponent.collapsed = !hostComponent.collapsed;" mask="{topGroupMask}">
                <!-- layer 0: title bar fill -->
                <!--- @private -->
                <s:Rect id="tbFill" bottom="1" left="0" right="0" top="0">
					
                    <s:fill>
						
                        <s:LinearGradient rotation="90">
							
                            <s:GradientEntry color="#E2E2E2" />
							
                            <s:GradientEntry color="#D9D9D9" />
							
                        </s:LinearGradient>
						
                    </s:fill>
					
                </s:Rect>
                <!-- layer 1: title bar highlight -->
                <!--- @private -->
                <s:Rect id="tbHilite" bottom="0" left="0" right="0" top="0">
					
                    <s:stroke>
						
                        <s:LinearGradientStroke rotation="90" weight="1">
							
                            <s:GradientEntry color="#EAEAEA" />
							
                            <s:GradientEntry color="#D9D9D9" />
							
                        </s:LinearGradientStroke>
						
                    </s:stroke>
					
                </s:Rect>
                <!-- layer 2: title bar divider -->
                <!--- @private -->
                <s:Rect id="tbDiv" bottom="0" height="1" left="0" right="0">
					
                    <s:fill>
						
                        <s:SolidColor color="#C0C0C0" />
						
                    </s:fill>
					
                </s:Rect>
                <!-- layer 3: text -->
                <!--- @copy spark.components.Panel#titleDisplay -->
                <s:Label id="titleDisplay" bottom="0" fontWeight="bold" left="31" maxDisplayedLines="1" minHeight="30"
					right="3" textAlign="start" top="1" verticalAlign="middle" />
				<!--- Defines the button to collapse or expand the content.  -->
				<s:Button id="collapseButton" left="6" skinClass="flame.controls.spark.skins.CollapsiblePanelExpandButtonSkin"
					skinClass.collapsed="flame.controls.spark.skins.CollapsiblePanelCollapseButtonSkin" verticalCenter="0" />
				
            </s:Group>
            <!--
                Note: setting the minimum size to 0 here so that changes to the host component's
                size will not be thwarted by this skin part's minimum size.   This is a compromise,
                more about it here: http://bugs.adobe.com/jira/browse/SDK-21143
            -->
            <!--- @copy spark.components.SkinnableContainer#contentGroup -->
            <s:Group id="contentGroup" excludeFrom="collapsed" height="100%" minHeight="0" minWidth="0" width="100%" />
            <!--- @private -->
            <s:Group id="bottomGroup" includeIn="normalWithControlBar, disabledWithControlBar" minHeight="0" minWidth="0">
                
                <s:Group bottom="0" left="0" mask="{bottomGroupMask}" right="0" top="0">
                    <!-- layer 0: control bar divider line -->
                    <s:Rect alpha="0.22" height="1" left="0" right="0" top="0">
						
                        <s:fill>
							
                            <s:SolidColor color="#000000" />
							
                        </s:fill>
						
                    </s:Rect>
                    <!-- layer 1: control bar highlight -->
                    <s:Rect bottom="0" left="0" right="0" top="1">
						
                        <s:stroke>
							
                            <s:LinearGradientStroke rotation="90" weight="1">
								
                                <s:GradientEntry color="#E5E5E5" />
								
                                <s:GradientEntry color="#D8D8D8" />
								
                            </s:LinearGradientStroke>
							
                        </s:stroke>
						
                    </s:Rect>
                    <!-- layer 2: control bar fill -->
                    <s:Rect bottom="1" left="1" right="1" top="2">
						
                        <s:fill>
							
                            <s:LinearGradient rotation="90">
								
                                <s:GradientEntry color="#DADADA" />
								
                                <s:GradientEntry color="#C5C5C5" />
								
                            </s:LinearGradient>
							
                        </s:fill>
						
                    </s:Rect>
					
                </s:Group>
                <!-- layer 3: control bar -->
                <!--- @copy spark.components.Panel#controlBarGroup -->
                <s:Group id="controlBarGroup" bottom="1" left="0" minHeight="0" minWidth="0" right="0" top="1">
					
                    <s:layout>
						
                        <s:HorizontalLayout gap="10" paddingBottom="7" paddingLeft="10" paddingRight="10" paddingTop="7" />
						
                    </s:layout>
					
                </s:Group>
				
            </s:Group>
			
        </s:Group>
		
    </s:Group>
	
</s:SparkSkin>